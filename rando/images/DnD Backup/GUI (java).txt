package mainPKG;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class GUI extends JPanel {
	
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	//INSTANTIATION
	//Clicky Instantiation
	HandlerClass handler = new HandlerClass();
	
	static boolean lClickD = false, rClickD = false, mClickD = false;
	static int clicks = 0;
	
	//Startup
	boolean startupChecker = true;
	
	//JFrame
	static int width = 1400;
	static int height = 700;
	static int sleeper = 100;
	
	//Sanity
	int tracker = 0;
	
	//Make gridWidth a number that evenly divides 1600 or scale "width" accordingly
	int gridWidth = 48;
	int gridHeight = 20;
	
	static //number of obstacles
	int obstacles = 10;
	int[][] map = new int[gridWidth][gridHeight];
	
	ArrayList<Hero> party = new ArrayList<Hero>();
	int partyLength = 0;
	int partySelection = 0;
	ArrayList<Obstacle> course = new ArrayList<Obstacle>();
	int courseLength = 0;
	
	
	
	
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	//GUI DRAWING
	
	@Override
	public void paint(Graphics g) {
		super.paint(g);
		Graphics2D g2d = (Graphics2D) g;
		g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		g2d.setColor(Color.black);
		
			
		//startup ritual
		if(startupChecker==true)
		{
			try {
				onStartup();
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
			drawBackground(g);
			drawMap(g);
			drawGrid(g);
			//fuckingCool(g);
			drawParty(g);
			drawPartyPriority(g);
			//sanity line
			g2d.setColor(this.randColor());
			g2d.drawLine(tracker, 0, tracker, height);
			tracker++;
			if (tracker>=width)
				tracker = 0;

	}
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	//METHEODS
	
	
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------
	//Drawing
	public void fuckingCool(Graphics g)
	{
		for(int i=0; i<gridWidth; i++)
		{
			g.drawLine(i*(width/gridWidth), 0, height, i*(width/gridWidth));
		}
	}
	public void generateGrid()
	{
		for(int i=0; i<gridWidth; i++)
		{
			for(int j=0; j<gridHeight; j++)
			{
				map[i][j] = 0;
			}
		}

	}
	
	public void drawBackground(Graphics g)
	{
		g.setColor(Color.GRAY);
		g.fillRect(0, 0, width, height);
	}
	public void drawGrid(Graphics g)
	{
		//Paint Background
		//paint lines/create grid
		g.setColor(Color.BLACK);
		for(int i=0; i<gridWidth; i++)
		{
			g.drawLine(i*(width/gridWidth), 0, i*(width/gridWidth), height);
		}
		for(int i=0; i<gridHeight; i++)
		{
			g.drawLine(0, i*(height/gridHeight), width, i*(height/gridHeight));
		}
	}
	
	public void drawMap(Graphics g)
	{
		int xSpot = 0;
		int ySpot = 0;
		int tempWidth = 0;
		int tempHeight = 0;
		for(int i=0; i<courseLength; i++)
		{
			g.setColor(((Obstacle) course.get(i)).getColor());
			
				xSpot = ((Obstacle) course.get(i)).getXPos();
				ySpot = ((Obstacle) course.get(i)).getYPos();
				tempWidth = ((Obstacle) course.get(i)).getWidth();
				tempHeight = ((Obstacle) course.get(i)).getHeight();
				
			g.fillRect(xSpot*(width/gridWidth)+1, ySpot*(height/gridHeight)+1, tempWidth*(width/gridWidth)-1, tempHeight*(height/gridHeight)-1);
		}
		
	}
	
	public void drawParty(Graphics g)
	{
		int xSpot = 0;
		int ySpot = 0;
		for(int i=0; i<partyLength; i++)
		{
			g.setColor(((Hero) party.get(i)).getColor());
			xSpot = ((Hero) party.get(i)).getXPos();
			ySpot = ((Hero) party.get(i)).getYPos();
			g.fillRect(xSpot*(width/gridWidth)+1, ySpot*(height/gridHeight)+1, (width/gridWidth)-1, (height/gridHeight)-1);
		}
		
	}
	
	public void drawPartyPriority(Graphics g)
	{
		g.setColor(new Color(255, 255, 0));
		int xSpot = 0;
		int ySpot = 0;
		xSpot = ((Hero) party.get(partySelection)).getXPos();
		ySpot = ((Hero) party.get(partySelection)).getYPos();
		g.drawRect(xSpot*(width/gridWidth), ySpot*(height/gridHeight), (width/gridWidth), (height/gridHeight));
		g.setColor(new Color(255, 255, 0));
		
	}
	/*public void winner(Graphics g)
	{
		String output ="Blueberry Did It!";
		g.setColor(Color.YELLOW);
		g.clearRect(0, 0, width, height);
		g.fillRect(0, 0, width, height);
		g.setColor(Color.BLACK);
		g.drawString(output, (width/2)-(output.length()*3), (height/2)-5);
		
	}*/
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------
	//Reading in Party/Map and communicating with Handler class
	
	public void partyCreation() throws FileNotFoundException
	{
		Scanner file = new Scanner(new File("images/Hero.txt"));
		
	while(file.hasNext())
		{
			Hero player = new Hero(file.nextLine(), file.nextInt(), file.nextInt(), file.nextInt(), file.nextInt(), file.nextInt());
			
			file.nextLine();
			party.add(player);
			partyLength++;
		}
	}
	
	public void mapCreation() throws FileNotFoundException
	{
		Scanner file = new Scanner(new File("images/Map.txt"));
		gridWidth = file.nextInt();
		gridHeight = file.nextInt();

		while(file.hasNext())
			{
			file.nextLine();
			file.nextLine();
				Obstacle boxxxy = new Obstacle(file.nextInt(), file.nextInt(), file.nextInt(), file.nextInt(), file.nextInt(), file.nextInt(), file.nextInt());

				course.add(boxxxy);
				courseLength++;
			}
	}
	
	
	public void partySelectUp()
	{
		if(partySelection==partyLength-1)
			partySelection = 0;
		else
			partySelection++;
	}
	
	public void partySelectDown()
	{
		if(partySelection==0)
			partySelection = partyLength-1;
		else
			partySelection--;
	}
	
	public int getPartySelection()
	{
		return partySelection;
	}
	

	//---------------------------------------------------------------------------------------------------------------------------------------------------------------

	
	
	public void startScreen(Graphics g)
	{
		g.setColor(this.randColor());
		g.fillRect(0, 0, width, height);
	}
	
	
	//===============================================================================================================================================================
	
	//Macro's
	public void onStartup() throws FileNotFoundException
	{
		generateGrid();
		partyCreation();
		mapCreation();
		startupChecker = false;
	}
	
	public Color randColor() {
		return new Color((int) (Math.random() * 256), (int) (Math.random() * 256), (int) (Math.random() * 256));
	}
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	//FRAMING
	static JTextField text = new JTextField();

	static JFrame frame = new JFrame("Thane is pretty cool");

	public static void frame() throws InterruptedException {
		GUI game = new GUI();
		Font f = new Font("Engravers MT", Font.BOLD, 23);
		
		text.setEditable(false);
		text.setBackground(Color.YELLOW);
		text.setFont(f);
		text.setText("Work In Progress ~~~~~~~ Under Construction");
		
		frame.add(game);
		frame.add(text, BorderLayout.SOUTH);
		

		//adds "zergy.jpg" to the frame
		/*
	 	JLabel label = new JLabel("", image, JLabel.CENTER);
		JPanel panel = new JPanel(new BorderLayout());
		panel.add( label, BorderLayout.CENTER );
		frame.add(panel, BorderLayout.CENTER);
		*/
		
		
		
		frame.setResizable(false);
		frame.setSize(width, height);
		frame.setLocation(100, 10);
		frame.getContentPane().setBackground(Color.BLACK);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
		
		//CLICKY STUFF
		frame.addMouseListener(game.handler);
		//frame.addMouseMotionListener(game.handler);
		
		
		
		while (true) {
			game.repaint();
			
			//STALLING
			Thread.sleep(sleeper);
		}
	}
	
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	public static void main(String[] args) throws InterruptedException, FileNotFoundException {
		
		frame();
		

	}
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	//CLICKY CLASS

	private class HandlerClass implements MouseListener, MouseMotionListener {
		public void mouseClicked(MouseEvent event) {
		}
		public void mousePressed(MouseEvent event) {
			int x = event.getX() - 5;
			int y = event.getY() - 32;
			
			if (event.getButton() == MouseEvent.BUTTON1) {
				((Hero) party.get(getPartySelection())).setPosition(x/(width/gridWidth), y/(height/gridHeight));
			}
			if (event.getButton() == MouseEvent.BUTTON3) {
				partySelectUp();
			}
			if (event.getButton() == MouseEvent.BUTTON2) {
				
			}
		}
		public void mouseReleased(MouseEvent event) {
			if (event.getButton() == MouseEvent.BUTTON1) {
			}
			if (event.getButton() == MouseEvent.BUTTON3) {
			}
		}
		public void mouseEntered(MouseEvent event) {
		}
		public void mouseExited(MouseEvent event) {
		}
		// These are mouse motion events
		public void mouseDragged(MouseEvent event) {
			int x = event.getX() - 5;
			int y = event.getY() - 32;
			
			System.out.println(x + ", " + y);
			
			if (lClickD) {
			} else if (rClickD) {
			} else if (mClickD) {
			}
		}
			

		public void keyPressed(KeyEvent event) {
			// TODO Auto-generated method stub
			int keyCode = event.getKeyCode();
			if (keyCode == KeyEvent.VK_W) {
				partySelectUp();
			}
			}
			
		@Override
		public void mouseMoved(MouseEvent event) {
			// TODO Auto-generated method stub
			
		}

	}
	

}